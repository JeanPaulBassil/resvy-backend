version: "3"

services:
  postgres:
    container_name: reservation-api-postgres
    image: postgres:15-alpine
    restart: unless-stopped
    user: ${POSTGRES_USER}
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    networks:
      - reservation-api-network
    volumes:
      - reservation-api-postgres-data:/var/lib/postgresql/data/
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready",
          "-U",
          "${POSTGRES_USER}",
          "-d",
          "${POSTGRES_DB}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  reservation-api:
    container_name: reservation-api-nestjs
    build:
      context: .
      dockerfile: ./docker/${NODE_ENV}.Dockerfile
    env_file:
      - .env
    networks:
      - reservation-api-network
    expose:
      - ${NESTJS_PORT}
    ports:
      - ${NESTJS_PORT}:${NESTJS_PORT}
    depends_on:
      - postgres

  prisma-studio:
    container_name: reservation-api-prisma-studio
    build:
      context: .
      dockerfile: ./docker/${NODE_ENV}.Dockerfile
    command: npx prisma studio
    env_file:
      - .env
    networks:
      - reservation-api-network
    ports:
      - "6555:5555"
    depends_on:
      - postgres
      - reservation-api

  redis:
    container_name: reservation-api-redis
    image: redis:6.2-alpine
    restart: unless-stopped
    ports:
      - "6389:6389"
    networks:
      - reservation-api-network
    command: ["redis-server", "--appendonly", "no"]

volumes:
  reservation-api-postgres-data:
  reservation-api-miniodata:

networks:
  reservation-api-network:
    name: reservation-api-network
